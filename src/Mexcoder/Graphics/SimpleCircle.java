/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Mexcoder.Graphics;

import java.awt.Color;
import java.awt.Component;

/**
 *
 * @author JuanAntonio
 */
public class SimpleCircle extends AbstractPixel {

    public SimpleCircle(Component c) {
        super(c);
    }
    
    @Override
    public void floodFill(){
        super.floodFill();
    }
    
    public void floodFill(Color c){
        super.floodFill(c);
    }

    //all cos and sen values form 0 to PI/4 whit 0.01 increments (78 values or so)
    protected static double[][] values = {{0.009999833334166664, 0.9999500004166653}, {0.01999866669333308, 0.9998000066665778}, {0.02999550020249566, 0.9995500337489875}, {0.03998933418663416, 0.9992001066609779}, {0.04997916927067833, 0.9987502603949663}, {0.0599640064794446, 0.9982005399352042}, {0.06994284733753277, 0.9975510002532796}, {0.0799146939691727, 0.9968017063026194}, {0.08987854919801104, 0.9959527330119943}, {0.09983341664682814, 0.9950041652780258}, {0.1097783008371748, 0.9939560979566968}, {0.11971220728891935, 0.9928086358538663}, {0.12963414261969483, 0.9915618937147881}, {0.13954311464423647, 0.9902159962126372}, {0.14943813247359922, 0.9887710779360422}, {0.15931820661424598, 0.9872272833756269}, {0.16918234906699603, 0.9855847669095608}, {0.1790295734258242, 0.9838436927881214}, {0.1888588949765006, 0.9820042351172703}, {0.19866933079506124, 0.9800665778412416}, {0.2084598998460996, 0.9780309147241483}, {0.21822962308086938, 0.9758974493306055}, {0.22797752353518846, 0.9736663950053748}, {0.23770262642713466, 0.9713379748520296}, {0.247403959254523, 0.9689124217106447}, {0.2570805518921552, 0.9663899781345132}, {0.2667314366888312, 0.9637708963658905}, {0.2763556485641138, 0.9610554383107709}, {0.28595222510483564, 0.9582438755126972}, {0.29552020666133966, 0.955336489125606}, {0.3050586364434436, 0.9523335698857134}, {0.3145665606161179, 0.9492354180824408}, {0.3240430283948685, 0.9460423435283869}, {0.3334870921408145, 0.9427546655283462}, {0.3428978074554515, 0.9393727128473789}, {0.3522742332750901, 0.9358968236779348}, {0.36161543196496215, 0.9323273456060344}, {0.37092046941298285, 0.9286646355765101}, {0.3801884151231616, 0.924909059857313}, {0.3894183423086507, 0.921060994002885}, {0.39860932798442306, 0.917120822816605}, {0.40776045305957037, 0.9130889403123081}, {0.416870802429211, 0.9089657496748851}, {0.4259394650659998, 0.9047516632199634}, {0.4349655341112304, 0.9004471023526768}, {0.44394810696552, 0.8960524975255252}, {0.4528862853790685, 0.8915682881953289}, {0.4617791755414831, 0.886994922779284}, {0.47062588817115825, 0.8823328586101213}, {0.47942553860420317, 0.8775825618903726}, {0.4881772468829077, 0.8727445076457512}, {0.4968801378437369, 0.8678191796776498}, {0.5055333412048472, 0.8628070705147609}, {0.5141359916531133, 0.857708681363824}, {0.5226872289306594, 0.8525245220595056}, {0.5311861979208836, 0.847255111013416}, {0.5396320487339695, 0.8419009751622686}, {0.5480239367918738, 0.8364626499151868}, {0.556361022912784, 0.8309406791001633}, {0.5646424733950356, 0.8253356149096781}, {0.5728674601004815, 0.8196480178454794}, {0.5810351605373053, 0.8138784566625338}, {0.5891447579422698, 0.8080275083121516}, {0.5971954413623923, 0.8020957578842924}, {0.6051864057360399, 0.7960837985490556}, {0.6131168519734341, 0.7899922314973649}, {0.6209859870365599, 0.783821665880849}, {0.6287930240184688, 0.7775727187509277}, {0.6365371822219682, 0.7712460149971063}, {0.6442176872376913, 0.7648421872844882}, {0.651833771021537, 0.7583618759905079}, {0.6593846719714734, 0.7518057291408947}, {0.6668696350036982, 0.7451744023448701}, {0.6742879116281454, 0.7384685587295876}, {0.6816387600233345, 0.7316888688738206}, {0.6889214451105516, 0.7248360107409049}, {0.696135238627357, 0.7179106696109431}, {0.7032794192004105, 0.7109135380122771}};

    public void draw(int x0, int y0, int x1, int y1, Color c) {
        Color tmp = this.c;
        this.setColor(c);
        this.draw(x0, y0, x1, y1);
        this.setColor(tmp);
    }

    public void draw(int x0, int y0, int x1, int y1) {
        int x = (x1 - x0) / 2;
        int y = (y1 - y0) / 2;
        this.setCenter(x0 + x, y0 + y); 
        this.drawAtCenter(x0 + x, y0 + y, Math.abs(x));
        // x holds the radius (assuming x = y)
        // x0 + x is the center for x 
        // y0 + y is the center for y
    }
    

    public void drawAtCenter(int cx, int cy, int r) {      

        int x, y, i;

//        for (double t = 0,x=0,y=0; t < Math.PI / 4; t += 0.01) {
//
//            x = /*(int)*/ (/*r */Math.sin(t));
//            y = /*(int)*/ (/*r */Math.cos(t));
//            System.out.println(x + "," + y);
//        }
        for (i = 0; i < 78; i++) {
            //precalculated the values so i dont need to run sin and cos each time
            //i mean its not like these values are gona change 

            x = (int) (SimpleCircle.values[i][0] * r);

            y = (int) (SimpleCircle.values[i][1] * r);

            this.putPixel(cx + x, cy + y);
            this.putPixel(cx + y, cy + x);
            this.putPixel(cx + x, cy - y);
            this.putPixel(cx + y, cy - x);
            this.putPixel(cx - x, cy + y);
            this.putPixel(cx - y, cy + x);
            this.putPixel(cx - x, cy - y);
            this.putPixel(cx - y, cy - x);

        }
    }

}
